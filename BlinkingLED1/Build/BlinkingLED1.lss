
C:\Users\Ivo\Desktop\GIBZ\Informatik\M242\Code\Projekt\\BlinkingLED1\Build\BlinkingLED1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001513  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5b  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ab  00000000  00000000  0000230e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000871  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb9  00000000  00000000  000035f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000041b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

void SetUpPorts(Bool isLedOn);

int main(void)
{
	Usart_Init(250000);
  a6:	60 e9       	ldi	r22, 0x90	; 144
  a8:	70 ed       	ldi	r23, 0xD0	; 208
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 7a 00 	call	0xf4	; 0xf4 <Usart_Init>
}

void SetUpPorts(Bool isLedOn)
{
	// Set the male port (pb3) to output, pb4 to output and pb5 to input
	SetRegister(PortB.DDR, (PIN_3, DdrOutput), (PIN_4, DdrOutput), (PIN_5, DdrInput));
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	84 b9       	out	0x04, r24	; 4
	SetRegister(PortB.PORT, (PIN_4, 0), (PIN_3, isLedOn))
  b6:	15 b8       	out	0x05, r1	; 5

int main(void)
{
	Usart_Init(250000);

	Bool isLedOn = False;
  b8:	30 e0       	ldi	r19, 0x00	; 0
	SetUpPorts(isLedOn);

	while(True)
	{
		isLedOn = !isLedOn;
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	84 2f       	mov	r24, r20
  c0:	31 11       	cpse	r19, r1
  c2:	85 2f       	mov	r24, r21
  c4:	38 2f       	mov	r19, r24
		UpdateRegister(PortB.PORT, (PIN_3, isLedOn));
  c6:	25 b1       	in	r18, 0x05	; 5
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	88 70       	andi	r24, 0x08	; 8
  d8:	92 2f       	mov	r25, r18
  da:	97 7f       	andi	r25, 0xF7	; 247
  dc:	89 2b       	or	r24, r25
  de:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x4a>
  f0:	00 00       	nop
  f2:	e5 cf       	rjmp	.-54     	; 0xbe <main+0x18>

000000f4 <Usart_Init>:
  f4:	9b 01       	movw	r18, r22
  f6:	ac 01       	movw	r20, r24
  f8:	60 e4       	ldi	r22, 0x40	; 64
  fa:	72 e4       	ldi	r23, 0x42	; 66
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 c4 00 	call	0x188	; 0x188 <__udivmodsi4>
 104:	21 50       	subi	r18, 0x01	; 1
 106:	31 09       	sbc	r19, r1
 108:	e0 ec       	ldi	r30, 0xC0	; 192
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	35 83       	std	Z+5, r19	; 0x05
 10e:	24 83       	std	Z+4, r18	; 0x04
 110:	88 e1       	ldi	r24, 0x18	; 24
 112:	81 83       	std	Z+1, r24	; 0x01
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	82 83       	std	Z+2, r24	; 0x02
 118:	08 95       	ret

0000011a <__vector_18>:
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	19 c0       	rjmp	.+50     	; 0x16a <__vector_18+0x50>
 138:	26 81       	ldd	r18, Z+6	; 0x06
 13a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USART_rxBufferIn>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	8f 71       	andi	r24, 0x1F	; 31
 144:	90 78       	andi	r25, 0x80	; 128
 146:	99 23       	and	r25, r25
 148:	24 f4       	brge	.+8      	; 0x152 <__vector_18+0x38>
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	80 6e       	ori	r24, 0xE0	; 224
 14e:	9f 6f       	ori	r25, 0xFF	; 255
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
 156:	89 17       	cp	r24, r25
 158:	41 f0       	breq	.+16     	; 0x16a <__vector_18+0x50>
 15a:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <USART_rxBufferIn>
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	ae 5f       	subi	r26, 0xFE	; 254
 162:	be 4f       	sbci	r27, 0xFE	; 254
 164:	2c 93       	st	X, r18
 166:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <USART_rxBufferIn>
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	24 f3       	brlt	.-56     	; 0x138 <__vector_18+0x1e>
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__udivmodsi4>:
 188:	a1 e2       	ldi	r26, 0x21	; 33
 18a:	1a 2e       	mov	r1, r26
 18c:	aa 1b       	sub	r26, r26
 18e:	bb 1b       	sub	r27, r27
 190:	fd 01       	movw	r30, r26
 192:	0d c0       	rjmp	.+26     	; 0x1ae <__udivmodsi4_ep>

00000194 <__udivmodsi4_loop>:
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	ee 1f       	adc	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	a2 17       	cp	r26, r18
 19e:	b3 07       	cpc	r27, r19
 1a0:	e4 07       	cpc	r30, r20
 1a2:	f5 07       	cpc	r31, r21
 1a4:	20 f0       	brcs	.+8      	; 0x1ae <__udivmodsi4_ep>
 1a6:	a2 1b       	sub	r26, r18
 1a8:	b3 0b       	sbc	r27, r19
 1aa:	e4 0b       	sbc	r30, r20
 1ac:	f5 0b       	sbc	r31, r21

000001ae <__udivmodsi4_ep>:
 1ae:	66 1f       	adc	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	88 1f       	adc	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	1a 94       	dec	r1
 1b8:	69 f7       	brne	.-38     	; 0x194 <__udivmodsi4_loop>
 1ba:	60 95       	com	r22
 1bc:	70 95       	com	r23
 1be:	80 95       	com	r24
 1c0:	90 95       	com	r25
 1c2:	9b 01       	movw	r18, r22
 1c4:	ac 01       	movw	r20, r24
 1c6:	bd 01       	movw	r22, r26
 1c8:	cf 01       	movw	r24, r30
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
